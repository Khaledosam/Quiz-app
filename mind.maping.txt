done:
01 - create json object for questions.
02 - starting creating html markup
03 - add dummy data
04 - create the styling
in progress:


05 - fetch number of questions from json object
06 - show question count + question category
07 - show number of bullets depending on questions count
08 - set the number of the right and wrong answers
09 - create countdown timer
10 - fetch the question from json object
11- show first question
12 - check the answer and hide question and show the next one
13 - if the time end mark the question as wrong and show next question
14 - add class on bullets after answer the question
15 - if the questions finished show the result



//select elements
let countSpan = document.querySelector(".quiz-info .count span");
let bullets = document.querySelector(".bullets");
let spanContainer = document.querySelector(".bullets .span-container");
let questionArea = document.querySelector(".question-area");
let answerArea = document.querySelector(".answer-area");
let submitButton = document.querySelector(".submit-button");
let resultsContainer = document.querySelector(".results");
let countDownElement = document.querySelector(".count-down");
// console.log(submitButton);

let currentIndex = 0;
let therightanswer = 0;
let countDownInterval;

function GetQuestions() {
  let myRequest = new XMLHttpRequest();
  myRequest.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      let questionObject = JSON.parse(this.responseText);
      let qCount = questionObject.length;
      createbullets(qCount);
      addQuestion(questionObject[currentIndex], qCount);

      countdown(5, qCount);
      //function check  answer
      submitButton.onclick = () => {
        let rightAnswer = questionObject[currentIndex].right_answer;
        currentIndex++;
        checkAnswer(rightAnswer, qCount);

        questionArea.innerHTML = "";
        answerArea.innerHTML = "";
        addQuestion(questionObject[currentIndex], qCount);
        handelBullets();
        clearInterval(countDownInterval);
        countdown(5, qCount);
        showResult(qCount);
      };
    }
  };
  myRequest.open("Get", " html_questions.json", true);
  myRequest.send();
}
GetQuestions();
function createbullets(num) {
  countSpan.innerHTML = num;

  // create bullets
  for (let i = 0; i < num; i++) {
    let thebullet = document.createElement("span");
    spanContainer.appendChild(thebullet);
    if (i === 0) {
      thebullet.className = "on";
    }
  }
}
//create questions
function addQuestion(obj, count) {
  if (currentIndex < count) {
    //create h2
    let qTitle = document.createElement("h2");
    let qTitleText = document.createTextNode(obj["title"]);
    qTitle.appendChild(qTitleText);
    questionArea.appendChild(qTitle);
    // create main div
    for (let i = 1; i <= 4; i++) {
      let mainDiv = document.createElement("div");
      mainDiv.className = "answer";

      let inputRadio = document.createElement("input");
      //name type id data
      inputRadio.name = "question";
      inputRadio.type = "radio";
      inputRadio.id = `answer_${i}`;
      inputRadio.dataset.answer = obj[`answer_${i}`];

      if (i === 1) {
        inputRadio.checked = true;
      }

      //create label
      let label = document.createElement("label");
      label.htmlFor = `answer_${i}`;
      let labelText = document.createTextNode(obj[`answer_${i}`]);

      label.appendChild(labelText);
      mainDiv.appendChild(inputRadio);
      mainDiv.appendChild(label);
      answerArea.appendChild(mainDiv);
    }
  }
}
function checkAnswer(rAnswer, count) {
  let answers = document.getElementsByName("question");
  let chosenAnswer;
  for (let i = 0; i < answers.length; i++) {
    if (answers[i].checked) {
      chosenAnswer = answers[i].dataset.answer;
    }
    if (rAnswer === chosenAnswer) {
      therightanswer++;
    }
  }
}

function handelBullets() {
  let bulletsspan = document.querySelectorAll(".bullets .span-container span");
  let arrayspans = Array.from(bulletsspan);
  arrayspans.forEach((span, index) => {
    if (currentIndex === index) {
      span.className = "on";
    }
  });
}

function showResult(count) {
  let theresult;
  // if (currentIndex < count) {
  //   resultsContainer.remove();
  // }
  if (currentIndex === count) {
    questionArea.remove();
    answerArea.remove();
    submitButton.remove();
    bullets.remove();
  }
  if (therightanswer > count / 2 && therightanswer < count) {
    theresult = `<span class="good">good</span>, you answered ${therightanswer} from ${count}`;
  } else if (therightanswer === count) {
    theresult = `<span class="perfect">perfect</span>, you answered all questions`;
  } else {
    theresult = `<span class="bad">bad</span>, you answered ${therightanswer} from ${count}`;
  }
  resultsContainer.innerHTML = theresult;
}
function countdown(duration, count) {
  if (currentIndex < count) {
    let minites, seconds;
    countDownInterval = setInterval(() => {
      minites = parseInt(duration / 60);
      seconds = parseInt(duration % 60);
      minites = minites < 10 ? `0${minites}` : minites;
      seconds = seconds < 10 ? `0${seconds}` : seconds;
      countDownElement.innerHTML = `${minites}:${seconds}`;

      if (--duration < 0) {
        clearInterval(countDownInterval);
        submitButton.onclick();
      }
    }, 1000);
  }
}
